{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getQuestions","username","a","fetch","response","status","alert","json","body","submitResponse","questionId","responseText","Quiz","useState","setUsername","setResponseText","questions","setQuestions","currentQuestion","setCurrentQuestion","timeRemaining","setTimeRemaining","loadNextQuestion","useEffect","interval","setInterval","clearInterval","onSubmit","e","preventDefault","then","id","placeholder","value","onChange","ev","target","type","text","length","q","question_id","success","Date","toISOString","substr","question_text","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+RAgBMA,G,qBAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACIC,MAAM,GAAD,OARd,GAQc,gCAAmCF,IAD5C,UAEK,OADlBG,EADa,QAENC,OAFM,uBAGjBC,MAAM,sBAHW,0CAMAF,EAASG,OANT,cAMbC,EANa,yBAOZA,GAPY,4CAAH,uDAUZC,EAAc,uCAAG,WACrBR,EACAS,EACAC,GAHqB,SAAAT,EAAA,sEAKEC,MAAM,GAAD,OAtBd,GAsBc,qCACaF,EADb,wBACqCS,EADrC,0BACiEC,IANxE,UAQG,MARH,OAQRN,OARQ,uBASnBC,MAAM,sBATa,mBAUZ,GAVY,iCAYd,GAZc,2CAAH,0DAePM,EAA8B,WAAO,IAAD,EACfC,mBAAiB,IADF,mBACxCZ,EADwC,KAC9Ba,EAD8B,OAEPD,mBAAiB,IAFV,mBAExCF,EAFwC,KAE1BI,EAF0B,OAGbF,mBAAc,MAHD,mBAGxCG,EAHwC,KAG7BC,EAH6B,OAIDJ,mBAAiB,GAJhB,mBAIxCK,EAJwC,KAIvBC,EAJuB,OAKLN,mBAAwB,MALnB,mBAKxCO,EALwC,KAKzBC,EALyB,KAOzCC,EAAmB,WACvBH,EAAmBD,EAAkB,GACrCH,EAAgB,IAChBM,EAzCqB,KAyDvB,OAbAE,qBAAU,WACR,IAAMC,EAAWC,aAAY,WACL,OAAlBL,IACEA,EAAgB,EAClBC,EAAiBD,EAAgB,GACN,IAAlBA,GACTE,OAGH,KACH,OAAO,kBAAMI,cAAcF,MAC1B,CAACJ,IAEc,OAAdJ,EAEA,0BACEW,SAAU,SAACC,GACTA,EAAEC,iBAEF7B,EAAaC,GAAU6B,MAAK,SAAC1B,GAC3Ba,EAAab,GACbiB,EAjEa,SAqEjB,kBAAC,YAAD,KACE,kBAAC,aAAD,CACEU,GAAG,WACHC,YAAY,WACZC,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OACRrB,EAAYqB,EAAGC,OAAOH,UAG1B,kBAAC,SAAD,CAAQI,KAAK,SAASC,KAAK,gBAIxBpB,EAAkBF,EAAUuB,OAEnC,0BACEZ,SAAU,SAACC,GACTP,EAAiB,MACjBO,EAAEC,iBAEF,IAAMW,EAAIxB,EAAUE,GACpBT,EAAeR,EAAUuC,EAAEC,YAAa9B,GAAcmB,MACpD,SAACY,GACKA,GACFpB,SAMR,uCACYJ,EAAkB,EAD9B,OACqCF,EAAUuB,OAAO,6BADtD,cAE+B,MAAjBnB,EAAwB,MAAQ,IAAIuB,KAAqB,IAAhBvB,GAAsBwB,cAAcC,OAAO,GAAI,IAEtG,kBAAC,YAAD,KACE,iCAAO7B,EAAUE,GAAiB4B,eAClC,kBAAC,aAAD,CACEf,GAAG,WACHC,YAAY,WACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OACRpB,EAAgBoB,EAAGC,OAAOH,UAG9B,kBAAC,SAAD,CAAQI,KAAK,SAASC,KAAK,aAK1B,wCAiBIS,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wCAEE,kBAAC,EAAD,UC9HUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eacec25c.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormGroup, InputGroup } from \"@blueprintjs/core\";\n\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport { time } from \"console\";\n\nconst API_URL = \"\";\nconst QUESTION_TIMEOUT = 10;\n\ntype QuestionState = {\n  question: String;\n};\n\nconst getQuestions = async (username: string) => {\n  const response = await fetch(`${API_URL}/start_quiz?username=${username}`);\n  if (response.status !== 200) {\n    alert(\"An error occurred!\");\n    return;\n  }\n  const body = await response.json();\n  return body;\n};\n\nconst submitResponse = async (\n  username: string,\n  questionId: number,\n  responseText: string\n) => {\n  const response = await fetch(\n    `${API_URL}/submit_response?username=${username}&question_id=${questionId}&response_text=${responseText}`\n  );\n  if (response.status !== 200) {\n    alert(\"An error occurred!\");\n    return false;\n  }\n  return true;\n};\n\nexport const Quiz: FunctionComponent<{}> = () => {\n  const [username, setUsername] = useState<string>(\"\");\n  const [responseText, setResponseText] = useState<string>(\"\");\n  const [questions, setQuestions] = useState<any>(null);\n  const [currentQuestion, setCurrentQuestion] = useState<number>(0);\n  const [timeRemaining, setTimeRemaining] = useState<number | null>(null);\n\n  const loadNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setResponseText(\"\");\n    setTimeRemaining(QUESTION_TIMEOUT);\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (timeRemaining !== null) {\n        if (timeRemaining > 0) {\n          setTimeRemaining(timeRemaining - 1);\n        } else if (timeRemaining === 0) {\n          loadNextQuestion();\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeRemaining]);\n\n  if (questions === null) {\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          // Load Quiz\n          getQuestions(username).then((response) => {\n            setQuestions(response);\n            setTimeRemaining(QUESTION_TIMEOUT);\n          });\n        }}\n      >\n        <FormGroup>\n          <InputGroup\n            id=\"username\"\n            placeholder=\"Username\"\n            value={username}\n            onChange={(ev: React.ChangeEvent<HTMLInputElement>) =>\n              setUsername(ev.target.value)\n            }\n          />\n          <Button type=\"submit\" text=\"Load Quiz\" />\n        </FormGroup>\n      </form>\n    );\n  } else if (currentQuestion < questions.length) {\n    return (\n      <form\n        onSubmit={(e) => {\n          setTimeRemaining(null);\n          e.preventDefault();\n          // Submit Response\n          const q = questions[currentQuestion];\n          submitResponse(username, q.question_id, responseText).then(\n            (success) => {\n              if (success) {\n                loadNextQuestion();\n              }\n            }\n          );\n        }}\n      >\n        <p>\n          Question {currentQuestion + 1} of {questions.length}<br />\n          Time left: {timeRemaining == null ? '...' : new Date(timeRemaining * 1000).toISOString().substr(11, 8)}\n        </p>\n        <FormGroup>\n          <p>Q. {questions[currentQuestion].question_text}</p>\n          <InputGroup\n            id=\"response\"\n            placeholder=\"Response\"\n            value={responseText}\n            onChange={(ev: React.ChangeEvent<HTMLInputElement>) =>\n              setResponseText(ev.target.value)\n            }\n          />\n          <Button type=\"submit\" text=\"Submit\" />\n        </FormGroup>\n      </form>\n    );\n  } else {\n    return <p>Complete</p>;\n  }\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          Quiz App\n          <Quiz />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}